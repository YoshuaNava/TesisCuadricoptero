"""autogenerated by genpy from comunicacion_serial/EstadoCuadricoptero.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class EstadoCuadricoptero(genpy.Message):
  _md5sum = "a177d60ff9bc3445dc3d8bf718819b39"
  _type = "comunicacion_serial/EstadoCuadricoptero"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """time tiempoEjecucion
int32 anguloPitch
int32 anguloRoll
int32 anguloYaw
int32 velocidadPitch
int32 velocidadRoll
int32 velocidadYaw
int32 altura
int32 encendido
int64 mensajesRecibidos

"""
  __slots__ = ['tiempoEjecucion','anguloPitch','anguloRoll','anguloYaw','velocidadPitch','velocidadRoll','velocidadYaw','altura','encendido','mensajesRecibidos']
  _slot_types = ['time','int32','int32','int32','int32','int32','int32','int32','int32','int64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       tiempoEjecucion,anguloPitch,anguloRoll,anguloYaw,velocidadPitch,velocidadRoll,velocidadYaw,altura,encendido,mensajesRecibidos

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(EstadoCuadricoptero, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.tiempoEjecucion is None:
        self.tiempoEjecucion = genpy.Time()
      if self.anguloPitch is None:
        self.anguloPitch = 0
      if self.anguloRoll is None:
        self.anguloRoll = 0
      if self.anguloYaw is None:
        self.anguloYaw = 0
      if self.velocidadPitch is None:
        self.velocidadPitch = 0
      if self.velocidadRoll is None:
        self.velocidadRoll = 0
      if self.velocidadYaw is None:
        self.velocidadYaw = 0
      if self.altura is None:
        self.altura = 0
      if self.encendido is None:
        self.encendido = 0
      if self.mensajesRecibidos is None:
        self.mensajesRecibidos = 0
    else:
      self.tiempoEjecucion = genpy.Time()
      self.anguloPitch = 0
      self.anguloRoll = 0
      self.anguloYaw = 0
      self.velocidadPitch = 0
      self.velocidadRoll = 0
      self.velocidadYaw = 0
      self.altura = 0
      self.encendido = 0
      self.mensajesRecibidos = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2I8iq.pack(_x.tiempoEjecucion.secs, _x.tiempoEjecucion.nsecs, _x.anguloPitch, _x.anguloRoll, _x.anguloYaw, _x.velocidadPitch, _x.velocidadRoll, _x.velocidadYaw, _x.altura, _x.encendido, _x.mensajesRecibidos))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.tiempoEjecucion is None:
        self.tiempoEjecucion = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 48
      (_x.tiempoEjecucion.secs, _x.tiempoEjecucion.nsecs, _x.anguloPitch, _x.anguloRoll, _x.anguloYaw, _x.velocidadPitch, _x.velocidadRoll, _x.velocidadYaw, _x.altura, _x.encendido, _x.mensajesRecibidos,) = _struct_2I8iq.unpack(str[start:end])
      self.tiempoEjecucion.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2I8iq.pack(_x.tiempoEjecucion.secs, _x.tiempoEjecucion.nsecs, _x.anguloPitch, _x.anguloRoll, _x.anguloYaw, _x.velocidadPitch, _x.velocidadRoll, _x.velocidadYaw, _x.altura, _x.encendido, _x.mensajesRecibidos))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.tiempoEjecucion is None:
        self.tiempoEjecucion = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 48
      (_x.tiempoEjecucion.secs, _x.tiempoEjecucion.nsecs, _x.anguloPitch, _x.anguloRoll, _x.anguloYaw, _x.velocidadPitch, _x.velocidadRoll, _x.velocidadYaw, _x.altura, _x.encendido, _x.mensajesRecibidos,) = _struct_2I8iq.unpack(str[start:end])
      self.tiempoEjecucion.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2I8iq = struct.Struct("<2I8iq")
